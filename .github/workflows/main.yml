name: Appium CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# permissions:
#   contents: read

jobs:
  build:
    runs-on: macos-latest # the machine type
    strategy: # we are using strategy if we need to run on parallel with different devices and version
      matrix:
        api-level: [29] #Google api level for example [25,23,28] 
        target: [playstore]
    steps:
    - uses: actions/checkout@v4 #checkout the code 

    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        # maven-version: 3.8
          
    - name: Debug Environment
      run: |
        echo "PATH: $PATH"
        which java
        java -version

    # - name: Set Java 18 as Default
    #   run: echo 'export JAVA_HOME="/usr/libexec/java_home -v 19"' >> $GITHUB_ENV

    # - name: Debug Environment
    #   run: |
    #     echo "PATH: $PATH"
    #     which mvn

    # - name: Build with Maven
    #   run: mvn clean install -DskipTests=true

    - name: Install and Run Appium Server
      run: |
        chmod +x ./scripts/RunAppiumServer.sh # install and run appium server in the background
        npm install -g appium
        appium -v
        npm -g install npm
        npm i appium-uiautomator2-driver
        appium driver install uiautomator2
        appium > /dev/null &

    # - name: Run Appium Tests
    #   run: |
    #     # Wait for Appium server to start (you can adjust the sleep duration as needed)
    #     sleep 10
    #     # Extract Appium server URL from the log file
    #     appium_server_url=$(grep -o 'http://[^ ]*' appium_server_log.txt)
    #     echo "Appium Server URL: $appium_server_url"
    - name: Start emulator and run test
      uses: reactivecircus/android-emulator-runner@v2 # install and create the Emulator
      with:
        api-level: ${{ matrix.api-level }}
        target: ${{ matrix.target }}
        arch: x86_64
        profile: Nexus 6
        script: |
          adb devices
          adb shell screenrecord /sdcard/emulator-video.mp4
          adb install Apk/starboard-dev.apk
          mvn clean test -Pandroid
      continue-on-error: true

    - name: Pull Video Recording
      run: |
        adb shell pkill -2 -l 1 screenrecord
        adb pull /sdcard/emulator-video.mp4 ${{ runner.workspace }}/emulator-video.mp4

    - name: Upload Video Recording
      uses: actions/upload-artifact@v2
      with:
        name: emulator-video
        path: ${{ runner.workspace }}/emulator-video.mp4
